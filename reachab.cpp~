#include <fstream>
#include <iostream>

#include "pnapi/pnapi.h"

using namespace std;
using namespace pnapi;

void test (int argc, char ** argv)
{
   PetriNet n;
   ifstream in;

   assert (argc == 2);
   in.open (argv[1]);

   try
   {
      in >> io::pnml >> n;
      // >> meta(io::CREATOR, PACKAGE_STRING)
      // >> meta(io::INVOCATION, invocation)
   }
   catch (exception::InputError err)
   {
      std::cerr << err << std::endl;
      exit (EXIT_FAILURE);
   }

   std::cout << n.getPlaces().size() << " places, " <<
n.getTransitions().size() << " transitions\n";
   return;

   std::cout << "Places:\n";
   std::set<Place*> places = n.getPlaces ();
   for (std::set<Place*>::iterator it = places.begin (); it !=
places.end (); ++it)
   {
      std::cout << "'" << (*it)->getName () << "' tokens " <<
(*it)->getTokenCount () << std::endl;
   }

   std::cout << "Net loaded, printing:\n";
   //std::cout << io::dot << n;
   std::cout << "Done!:\n";
}


int main(int argc, char** argv) {

   test (argc, argv);
   return 0;
}
